import { HumanMessage } from "@langchain/core/messages";
import { MemorySaver } from "@langchain/langgraph";
import { createReactAgent } from "@langchain/langgraph/prebuilt";
import { ChatOpenAI } from "@langchain/openai";
import * as dotenv from "dotenv";

dotenv.config();

function validateEnvironment(): void {
  const missingVars: string[] = [];
  
  const requiredVars = ["XAI_API_KEY"];
  requiredVars.forEach(varName => {
    if (!process.env[varName]) {
      missingVars.push(varName);
    }
  });

  if (missingVars.length > 0) {
    console.error("Error: Required environment variables are not set");
    missingVars.forEach(varName => {
      console.error(`${varName}=your_${varName.toLowerCase()}_here`);
    });
    process.exit(1);
  }
}

validateEnvironment();

async function initializeAgent() {
  try {
    const llm = new ChatOpenAI({
      model: "grok-beta",
      apiKey: process.env.XAI_API_KEY,
      configuration: {
        baseURL: "https://api.x.ai/v1"
      }
    });

    const memory = new MemorySaver();
    const agent = await createReactAgent({
      llm,
      tools: [],
      systemMessage: `You are an AI assistant that helps users create fitness and lifestyle challenges.
      
When users want to create a challenge:
1. Ask about their goals and interests
2. Suggest challenge parameters (name, target, type)
3. Explain how the challenge works with the XFIT token on Stacks blockchain
4. Help them set realistic targets and stakes

Be concise, friendly, and focused on helping users create engaging challenges.`
    });

    return { agent, memory };
  } catch (error) {
    console.error("Error initializing agent:", error);
    throw error;
  }
}

let agentInstance: any = null;
let memoryInstance: any = null;

export async function chatWithAgent(userInput: string) {
  try {
    if (!agentInstance) {
      const { agent, memory } = await initializeAgent();
      agentInstance = agent;
      memoryInstance = memory;
    }

    const userMessage = new HumanMessage(userInput);
    const response = await agentInstance.invoke([userMessage], { configurable: { memory: memoryInstance } });
    
    return [
      {
        agent: {
          messages: [
            {
              kwargs: {
                content: response.content,
              },
            },
          ],
        },
      },
    ];
  } catch (error) {
    console.error("Error in chat:", error);
    throw error;
  }
}
