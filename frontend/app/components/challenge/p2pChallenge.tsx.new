"use client";
import { useState } from "react";
import axios from "axios";
import { useContract } from "../../../lib/hooks/useContract";

const P2PChallenge = (challengeDetails: any) => {
  console.log(
    "Challenge Details: from where contract is called",
    challengeDetails
  );
  console.log(
    "Challenge Details: from where contract is called",
    challengeDetails.challengeDetails.id
  );

  const [hasJoined, setHasJoined] = useState(false);
  const [isActive, setIsActive] = useState(false);
  const [activityIds, setActivityIds] = useState({});
  const [distances, setDistances] = useState({ activity1: 0, activity2: 0 });
  const [pollInterval, setPollInterval] = useState<NodeJS.Timeout | null>(null);
  const [athleteWins, setAthleteWins] = useState(false);
  
  const { joinP2PChallenge, resolveP2PChallenge, loading, error } = useContract();

  const handleJoinChallenge = async () => {
    console.log("Joining challenge...");
    try {
      const challengeId = parseInt(challengeDetails.challengeDetails.id);
      await joinP2PChallenge(challengeId, async () => {
        setHasJoined(true);
        setIsActive(true);
        const postActivity1 = fetch("http://localhost:3001/activities1", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            challengeId: challengeDetails.challengeDetails.id,
          }),
        });

        const postActivity2 = fetch("http://localhost:3001/activities2", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            challengeId: challengeDetails.challengeDetails.id,
          }),
        });

        const [activity1, activity2] = await Promise.all([
          postActivity1,
          postActivity2,
        ]);

        const activity1Data = await activity1.json();
        const activity2Data = await activity2.json();

        setActivityIds({
          activity1: activity1Data.activityId,
          activity2: activity2Data.activityId,
        });

        const intervalId = setInterval(async () => {
          const distanceResponse = await fetch(
            `http://localhost:3001/distance/${challengeDetails.challengeDetails.id}`
          );
          const distanceData = await distanceResponse.json();
          setDistances({
            activity1: distanceData.distance1,
            activity2: distanceData.distance2,
          });
        }, 10000);

        setPollInterval(intervalId);
      });
    } catch (err) {
      console.error('Error joining challenge:', err);
    }
  };

  const handleResolveChallenge = async () => {
    try {
      const challengeId = parseInt(challengeDetails.challengeDetails.id);
      await resolveP2PChallenge(challengeId, () => {
        if (pollInterval) {
          clearInterval(pollInterval);
        }
        setIsActive(false);
      });
    } catch (err) {
      console.error('Error resolving challenge:', err);
    }
  };

  return (
    <div className="bg-gray-800 rounded-lg p-6 mt-4 text-white">
      <h2 className="text-2xl font-bold mb-4">
        Challenge: {challengeDetails.challengeDetails.challengeName}
      </h2>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
        <div>
          <h3 className="text-lg font-semibold">Category</h3>
          <p>{challengeDetails.challengeDetails.category}</p>
        </div>
        <div>
          <h3 className="text-lg font-semibold">Target</h3>
          <p>
            {challengeDetails.challengeDetails.target}{" "}
            {challengeDetails.challengeDetails.targetType}
          </p>
        </div>
        <div>
          <h3 className="text-lg font-semibold">Stake Amount</h3>
          <p>{challengeDetails.challengeDetails.amount} XFIT</p>
        </div>
      </div>

      {!hasJoined && (
        <button
          onClick={handleJoinChallenge}
          disabled={loading}
          className="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 disabled:bg-blue-400 disabled:cursor-not-allowed"
        >
          {loading ? 'Joining...' : 'Join Challenge'}
        </button>
      )}

      {isActive && (
        <div className="mt-4">
          <h3 className="text-lg font-semibold mb-2">Progress</h3>
          <div className="space-y-2">
            <div>
              <p>Activity 1 Distance: {distances.activity1} meters</p>
              <div className="w-full bg-gray-700 rounded-full h-2">
                <div
                  className="bg-blue-600 h-2 rounded-full"
                  style={{
                    width: `${Math.min(
                      (distances.activity1 /
                        challengeDetails.challengeDetails.target) *
                        100,
                      100
                    )}%`,
                  }}
                ></div>
              </div>
            </div>
            <div>
              <p>Activity 2 Distance: {distances.activity2} meters</p>
              <div className="w-full bg-gray-700 rounded-full h-2">
                <div
                  className="bg-green-600 h-2 rounded-full"
                  style={{
                    width: `${Math.min(
                      (distances.activity2 /
                        challengeDetails.challengeDetails.target) *
                        100,
                      100
                    )}%`,
                  }}
                ></div>
              </div>
            </div>
          </div>

          {(distances.activity1 >= challengeDetails.challengeDetails.target ||
            distances.activity2 >= challengeDetails.challengeDetails.target) && (
            <button
              onClick={handleResolveChallenge}
              disabled={loading}
              className="mt-4 bg-green-600 text-white px-6 py-2 rounded-lg hover:bg-green-700 disabled:bg-green-400 disabled:cursor-not-allowed"
            >
              {loading ? 'Resolving...' : 'Resolve Challenge'}
            </button>
          )}
        </div>
      )}

      {error && (
        <p className="text-red-500 mt-2">{error}</p>
      )}
    </div>
  );
};

export default P2PChallenge;
